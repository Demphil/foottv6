name: Update Matches Data

on:
  schedule:
    - cron: '0 */6 * * *'  # كل 6 ساعات
  workflow_dispatch:

permissions:
  contents: write

jobs:
  update-matches:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Prepare Environment
        run: |
          mkdir -p assets/data
          npm install axios@1.6.7 cheerio@1.0.0-rc.12 --no-package-lock --no-save

      - name: Run Scraper
        env:
          SCRAPER_API_KEY: ${{ secrets.SCRAPER_API_KEY }}
        run: |
          cat << 'EOF' > scrape.js
          const axios = require('axios').create({
            httpsAgent: require('https').Agent({ keepAlive: true })
          });
          const cheerio = require('cheerio');
          const fs = require('fs');
          const path = require('path');
          
          const IMPORTANT_LEAGUES = {
            'الدوري السعودي': 564,
            'الدوري الإنجليزي': 39,
            'الدوري الإسباني': 140,
            'الدوري الألماني': 78,
            'الدوري الإيطالي': 135,
            'الدوري الفرنسي': 61
          };

          async function scrapeMatches() {
            try {
              const targetUrl = 'https://kooora.live-kooora.com/';
              const apiUrl = `https://api.scraperapi.com/?api_key=${process.env.SCRAPER_API_KEY}&url=${encodeURIComponent(targetUrl)}`;
              
              console.log('Fetching data from:', targetUrl);
              const response = await axios.get(apiUrl, {
                headers: {
                  'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
                  'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8'
                },
                timeout: 30000
              });

              const $ = cheerio.load(response.data);
              const matches = [];

              // استخراج المباريات - تحتاج لتعديل حسب هيكل موقع كوورة
              $('.match-row').each((i, element) => {
                const match = $(element);
                const leagueName = match.closest('.league-container')?.find('.league-name')?.text()?.trim() || '';
                
                if (!Object.keys(IMPORTANT_LEAGUES).some(name => leagueName.includes(name))) return;

                matches.push({
                  id: match.attr('id') || `match-${Date.now()}-${i}`,
                  homeTeam: {
                    name: match.find('.team-home')?.text()?.trim() || 'فريق غير معروف',
                    logo: match.find('.team-home img')?.attr('src') || ''
                  },
                  awayTeam: {
                    name: match.find('.team-away')?.text()?.trim() || 'فريق غير معروف',
                    logo: match.find('.team-away img')?.attr('src') || ''
                  },
                  score: match.find('.match-score')?.text()?.trim() || 'vs',
                  time: match.find('.match-time')?.text()?.trim() || 'الآن',
                  date: new Date().toISOString(),
                  league: {
                    id: IMPORTANT_LEAGUES[Object.keys(IMPORTANT_LEAGUES).find(name => leagueName.includes(name))] || 0,
                    name: leagueName
                  },
                  venue: match.find('.match-venue')?.text()?.trim() || 'ملعب غير معروف',
                  broadcast: [],
                  manualChannels: leagueName.includes('السعودي') ? ['bein SPORTS HD1'] : []
                });
              });

              fs.writeFileSync('assets/data/matches.json', JSON.stringify(matches, null, 2));
              console.log(`Successfully saved ${matches.length} matches`);

            } catch (error) {
              console.error('Scraping failed:', error.message);
              createFallbackData();
            }
          }

          function createFallbackData() {
            const fallbackMatches = [
              {
                id: 'fallback-1',
                homeTeam: { name: 'الهلال', logo: '' },
                awayTeam: { name: 'النصر', logo: '' },
                score: 'vs',
                time: '21:00',
                date: new Date().toISOString(),
                league: { id: 564, name: 'الدوري السعودي' },
                venue: 'ملعب الملك فهد',
                broadcast: [{ name: 'bein SPORTS HD1' }],
                manualChannels: ['bein SPORTS HD1']
              }
            ];
            
            if (!fs.existsSync('assets/data')) {
              fs.mkdirSync('assets/data', { recursive: true });
            }
            
            fs.writeFileSync('assets/data/matches.json', JSON.stringify(fallbackMatches, null, 2));
            console.log('Fallback data created');
          }

          scrapeMatches();
          EOF

          node scrape.js

      - name: Verify Data
        run: |
          echo "File content:"
          cat assets/data/matches.json
          echo ""
          echo "Match count: $(jq length assets/data/matches.json)"

      - name: Commit and Push Changes
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add assets/data/matches.json
          git diff --cached --quiet || (git commit -m "🔄 Auto-update matches data [skip ci]" && git push)
