name: Update Matches Data

on:
  schedule:
    - cron: '0 */6 * * *'  # كل 6 ساعات
  workflow_dispatch:

permissions:
  contents: write

jobs:
  update-matches:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Initialize Project
        run: |
          mkdir -p assets/data
          echo '{"private":true}' > package.json

      - name: Install Dependencies
        run: npm install axios cheerio --no-package-lock --no-save

      - name: Fetch and Process Matches
        env:
          SCRAPER_API_KEY: ${{ secrets.SCRAPER_API_KEY }}
        run: |
          node -e "
          const axios = require('axios');
          const cheerio = require('cheerio');
          const fs = require('fs');
          const path = require('path');

          async function scrapeLiveScore() {
            try {
              const targetUrl = 'https://www.livescore.com/';
              const apiUrl = `https://api.scraperapi.com/?api_key=${process.env.SCRAPER_API_KEY}&url=${encodeURIComponent(targetUrl)}`;
              
              const response = await axios.get(apiUrl);
              const $ = cheerio.load(response.data);
              
              const matches = [];
              const IMPORTANT_LEAGUES = ['الدوري السعودي', 'الدوري الإنجليزي', 'الدوري الإسباني', 'الدوري الألماني', 'الدوري الإيطالي', 'الدوري الفرنسي'];
              
              // استخراج المباريات من الصفحة
              $('.match').each((i, element) => {
                const match = $(element);
                const leagueName = match.closest('.league')?.find('.name')?.text()?.trim();
                
                if (!IMPORTANT_LEAGUES.some(league => leagueName.includes(league))) {
                  return;
                }
                
                const homeTeam = {
                  name: match.find('.home .name')?.text()?.trim() || 'فريق غير معروف',
                  logo: match.find('.home .logo')?.attr('src') || ''
                };
                
                const awayTeam = {
                  name: match.find('.away .name')?.text()?.trim() || 'فريق غير معروف',
                  logo: match.find('.away .logo')?.attr('src') || ''
                };
                
                matches.push({
                  id: match.attr('data-id') || Date.now().toString(),
                  homeTeam,
                  awayTeam,
                  score: match.find('.score')?.text()?.trim() || 'vs',
                  time: match.find('.time')?.text()?.trim() || 'الآن',
                  date: new Date().toISOString(),
                  league: {
                    id: generateLeagueId(leagueName),
                    name: leagueName || 'بطولة غير معروفة'
                  },
                  venue: match.find('.venue')?.text()?.trim() || 'ملعب غير معروف',
                  broadcast: extractBroadcastInfo(match)
                });
              });
              
              // حفظ البيانات
              const outputPath = path.join('assets', 'data', 'matches.json');
              fs.writeFileSync(outputPath, JSON.stringify(matches, null, 2));
              console.log('✅ تم حفظ', matches.length, 'مباراة بنجاح');
              
            } catch (error) {
              console.error('❌ فشل في جلب البيانات:', error.message);
              createFallbackData();
            }
          }
          
          function generateLeagueId(leagueName) {
            const leagueMap = {
              'الدوري السعودي': 564,
              'الدوري الإنجليزي': 39,
              'الدوري الإسباني': 140,
              'الدوري الألماني': 78,
              'الدوري الإيطالي': 135,
              'الدوري الفرنسي': 61
            };
            
            return leagueMap[leagueName] || Math.floor(Math.random() * 1000);
          }
          
          function extractBroadcastInfo(match) {
            const broadcastText = match.find('.broadcast')?.text()?.trim();
            if (!broadcastText) return [];
            
            return broadcastText.split(',').map(channel => ({
              name: channel.trim()
            }));
          }
          
          function createFallbackData() {
            const fallbackMatches = [
              {
                id: 'fallback-1',
                homeTeam: { name: 'الهلال', logo: '' },
                awayTeam: { name: 'النصر', logo: '' },
                score: 'vs',
                time: '21:00',
                date: new Date().toISOString(),
                league: { id: 564, name: 'الدوري السعودي' },
                venue: 'ملعب الملك فهد',
                broadcast: [{ name: 'bein SPORTS HD1' }],
                manualChannels: ['bein SPORTS HD1']
              }
            ];
            
            const outputPath = path.join('assets', 'data', 'matches.json');
            fs.writeFileSync(outputPath, JSON.stringify(fallbackMatches, null, 2));
            console.log('⚠️ تم استخدام بيانات احتياطية');
          }
          
          scrapeLiveScore();
          "

      - name: Commit and Push Changes
        run: |
          git config --global user.name "GitHub Bot"
          git config --global user.email "actions@users.noreply.github.com"
          git add assets/data/matches.json
          git diff --cached --quiet || git commit -m "🔄 تحديث بيانات المباريات عبر ScraperAPI"
          git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }} HEAD:main
